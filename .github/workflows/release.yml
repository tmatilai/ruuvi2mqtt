name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch: {}

jobs:
  build:
    name: Build binaries
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
        os: [ubuntu-latest]
        include:
          # Use an older Ubuntu version for glibc compatibility with Debian v11 Buster
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
    env:
      RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}
      USE_CROSS: "${{ !startsWith(matrix.target, 'x86_64-unknown-linux-') }}"
      CARGO: cargo
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3.3.0

      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@e645b0cf01249a964ec099494d38d2da0f0b349f
        with:
          toolchain: stable

      - name: Setup | Cache
        uses: Swatinem/rust-cache@359a70e43a0bb8a13953b04a90f76428b4959bb6 # v2.2.0
        with:
          key: "${{ matrix.target }}-${{ matrix.os }}"

      - name: Setup | Cross
        if: env.USE_CROSS == 'true'
        run: |
          cargo install --bins cross
          echo "CARGO=cross" >> $GITHUB_ENV

      - name: Setup | Install build dependencies
        if: env.USE_CROSS == 'false'
        run: |
          rustup target add ${{ matrix.target }}
          sudo apt-get update
          sudo apt-get install --assume-yes libdbus-1-dev pkg-config

      - name: Setup | Log in to the Container registry
        if: env.USE_CROSS == 'true'
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup | Set build options
        run: |
          case "${{ matrix.target }}" in
          aarch64-unknown-linux-gnu)
            echo 'RUSTFLAGS=-L /usr/aarch64-linux-gnu/lib/ -L /usr/lib/aarch64-linux-gnu/' >> $GITHUB_ENV
            ;;
          armv7-unknown-linux-gnueabihf)
            echo 'RUSTFLAGS=-L /usr/arm-linux-gnueabihf/lib/ -L /usr/lib/arm-linux-gnueabihf/' >> $GITHUB_ENV
            ;;
          esac
          if [[ "$RELEASE" == 'true' ]]; then
            echo 'RELEASE_FLAG=--release' >> $GITHUB_ENV
          fi

      - name: Build
        run: ${{ env.CARGO }} build --verbose ${{ env.RELEASE_FLAG }} --target ${{ matrix.target }}

      - name: Prepare artifacts
        run: |
          mkdir -p 'binaries/${{ matrix.target }}'
          case "$RELEASE" in
            true) profile=release;;
            *) profile=debug;;
          esac
          cp target/${{ matrix.target }}/$profile/ruuvi2mqtt 'binaries/${{ matrix.target }}/'

      - name: Upload artifacts
        uses: actions/upload-artifact@v3.1.2
        with:
          name: binaries
          path: binaries

  docker:
    name: Build and push Docker images
    needs: build
    permissions:
      contents: read
      packages: write
    env:
      PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    runs-on: ubuntu-latest

    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3.3.0

      - name: Setup | Download artifacts
        uses: actions/download-artifact@v3.0.2
        with:
          name: binaries
          path: binaries

      - name: Setup | Prepare binaries
        run: |
          chmod 0755 binaries/*/ruuvi2mqtt
          mkdir -p binaries/{${{ env.PLATFORMS }}}
          ln -s ../../aarch64-unknown-linux-gnu/ruuvi2mqtt binaries/linux/arm64/
          ln -s ../../../armv7-unknown-linux-gnueabihf/ruuvi2mqtt binaries/linux/arm/v7/
          ln -s ../../x86_64-unknown-linux-gnu/ruuvi2mqtt binaries/linux/amd64/

      - name: Setup | Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup | Docker QEMU
        uses: docker/setup-qemu-action@v2.1.0

      - name: Setup | Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.1.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
